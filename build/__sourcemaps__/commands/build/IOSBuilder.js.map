{"version":3,"sources":["commands/build/IOSBuilder.js"],"names":["nonEmptyInput","val","expertPrompt","produceAbsolutePath","p12Path","isAbsolute","resolve","runAsExpertQuestion","type","name","message","choices","value","OBLIGATORY_CREDS_KEYS","LET_EXPO_HANDLE","I_PROVIDE_FILE","OVERRIDE_CHOICES","whatToOverride","provisionProfilePath","validate","doesFileProvidedExist","bind","filter","sharedQuestions","password","length","appleCredsQuestions","IOSBuilder","getPublishInfoAsync","projectDir","args","username","experienceName","remoteFullPackageName","bundleIdentifier","bundleIdentifierIOS","INVALID_OPTIONS","checkStatus","credentialMetadata","platform","options","clearCredentials","removeCredentialsForPlatform","warn","DEBUG","console","doFastlaneActionsExist","log","prepareLocalAuth","runLocalAuth","error","stdout","undefined","replace","ensureReleaseExists","publishedExpIds","build","credsStarter","credsMetadata","creds","teamId","process","env","EXP_APPLE_TEAM_ID","certP12","EXP_DIST_CERTIFICATE_PATH","certPassword","EXP_DIST_CERTIFICATE_PASSWORD","pushP12","EXP_PUSH_CERTIFICATE_PATH","pushPassword","EXP_PUSH_CERTIFICATE_PASSWORD","provisioningProfile","EXP_PROVIONING_PROFILE_PATH","readFile","toString","_copyOverAsString","choice","userProvidedOverride","prompt","distCertValues","pathToP12","p12Password","pushCertValues","pathToProvisioningProfile","Error","authActionAttempt","forEach","isString","k","appleCreds","ensureAppIdLocally","checkAppExistenceAttempt","result","reason","startsWith","NO_BUNDLE_ID","createAppOnPortal","_throwIfFailureWithReasonDump","produceProvisionProfile","produceProvisionProfileAttempt","MULTIPLE_PROFILES","produceCerts","produceCertAttempt","producePushCerts","producePushCertsAttempt","justTeamId","askForAppleCreds","appleCredentials","validateCredentialsProduceTeamId","checkCredsAttempt","_ensureAppExists","expoManages","spinner","start","text","expoManagedResource","stop","action","clientHas","credsMissing","keys","has","push","credentialsExistForPlatformAsync","clientHasAllNeededCreds","_areCredsMissing","useCi","runningAsCI","updateCredentialsForPlatform","strategy","_validateCredsEnsureAppExists","isExpoManaged","runningAsExpoManaged","runningAsExpert","replyAttempt","rawDump"],"mappings":"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","file":"../../../commands/build/IOSBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport untildify from 'untildify';\nimport { Exp, Credentials, XDLError, ErrorCode } from 'xdl';\nimport ora from 'ora';\nimport chalk from 'chalk';\n\nimport type { IOSCredentials, CredentialMetadata } from 'xdl/src/Credentials';\nimport BaseBuilder from './BaseBuilder';\nimport log from '../../log';\n\nimport * as authFuncs from './auth';\n\nconst nonEmptyInput = val => val !== '';\n\nconst expertPrompt = `\nWARNING! In this mode, we won't be able to make sure your certificates,\nor provisioning profile are valid. Please double check that you're\nuploading valid files for your app otherwise you may encounter strange errors!\n\nMake sure you've created your app ID on the developer portal, that your app ID\nis in app.json as \\`bundleIdentifier\\`, and that the provisioning profile you\nupload matches that team ID and app ID.\n`;\n\nconst produceAbsolutePath = p12Path => {\n  p12Path = untildify(p12Path);\n  if (!path.isAbsolute(p12Path)) {\n    p12Path = path.resolve(p12Path);\n  }\n  return p12Path;\n};\n\nconst runAsExpertQuestion = {\n  type: 'list',\n  name: 'isExpoManaged',\n  message: 'How would you like to upload your credentials?\\n',\n  choices: [\n    { name: 'Expo handles all credentials, you can still provide overrides', value: true },\n    {\n      name: 'I will provide all the credentials and files needed, Expo does limited validation',\n      value: false,\n    },\n  ],\n};\n\nconst OBLIGATORY_CREDS_KEYS = new Set([\n  'certP12',\n  'certPassword',\n  'pushP12',\n  'pushPassword',\n  'provisioningProfile',\n  'teamId',\n]);\n\nconst LET_EXPO_HANDLE = 'Let Expo handle the process';\n\nconst I_PROVIDE_FILE = 'I want to upload my own file';\n\nconst OVERRIDE_CHOICES = [\n  { name: LET_EXPO_HANDLE, value: true },\n  { name: I_PROVIDE_FILE, value: false },\n];\n\nconst whatToOverride = [\n  {\n    type: 'list',\n    name: 'distCert',\n    message: 'Will you provide your own Distribution Certificate?',\n    choices: OVERRIDE_CHOICES,\n  },\n  {\n    type: 'list',\n    name: 'pushCert',\n    message: 'Will you provide your own Push Certificate?',\n    choices: OVERRIDE_CHOICES,\n  },\n];\n\nconst provisionProfilePath = {\n  type: 'input',\n  name: 'pathToProvisioningProfile',\n  message: 'Path to your .mobile provisioning Profile',\n  validate: authFuncs.doesFileProvidedExist.bind(null, true),\n  filter: produceAbsolutePath,\n};\n\nconst sharedQuestions = [\n  {\n    type: 'input',\n    name: 'pathToP12',\n    message: 'Path to P12 file:',\n    validate: authFuncs.doesFileProvidedExist.bind(null, true),\n    filter: produceAbsolutePath,\n  },\n  {\n    type: 'password',\n    name: 'p12Password',\n    message: 'P12 password:',\n    validate: password => password.length > 0,\n  },\n];\n\nconst appleCredsQuestions = [\n  {\n    type: 'input',\n    name: 'appleId',\n    message: `What's your Apple ID?`,\n    validate: nonEmptyInput,\n  },\n  {\n    type: 'password',\n    name: 'password',\n    message: `Password?`,\n    validate: nonEmptyInput,\n  },\n];\n\nexport default class IOSBuilder extends BaseBuilder {\n  async run() {\n    // validate bundleIdentifier before hitting the network to check build status\n    const {\n      args: {\n        username,\n        remoteFullPackageName: experienceName,\n        bundleIdentifierIOS: bundleIdentifier,\n      },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    if (!bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_OPTIONS,\n        `Your project must have a bundleIdentifier set in app.json.\nSee https://docs.expo.io/versions/latest/guides/building-standalone-apps.html`\n      );\n    }\n\n    // Check the status of any current builds\n    await this.checkStatus();\n    const credentialMetadata = { username, experienceName, bundleIdentifier, platform: 'ios' };\n    // Clear credentials if they want to:\n    if (this.options.clearCredentials) {\n      await Credentials.removeCredentialsForPlatform('ios', credentialMetadata);\n      log.warn('Removed existing credentials');\n    }\n    if (this.options.type !== 'simulator') {\n      try {\n        if (authFuncs.DEBUG) {\n          console.log(await authFuncs.doFastlaneActionsExist());\n        }\n        await authFuncs.prepareLocalAuth();\n        await this.runLocalAuth(credentialMetadata);\n      } catch (e) {\n        log.error(`Error while gathering & validating credentials`);\n        if (authFuncs.DEBUG) {\n          if (e.stdout !== undefined) {\n            // sometimes WSL adds null characters\n            log.error(e.stdout.replace(/\\0/g, ''));\n          } else {\n            log.error(JSON.stringify(e));\n          }\n        }\n        throw e;\n      }\n    }\n    // Publish the experience, if necessary\n    const publishedExpIds = await this.ensureReleaseExists('ios');\n    // Initiate the build with the published experience\n    await this.build(publishedExpIds, 'ios');\n  }\n\n  async runningAsCI(credsStarter, credsMetadata) {\n    const creds = {\n      teamId: process.env.EXP_APPLE_TEAM_ID,\n      certP12: process.env.EXP_DIST_CERTIFICATE_PATH,\n      certPassword: process.env.EXP_DIST_CERTIFICATE_PASSWORD,\n      pushP12: process.env.EXP_PUSH_CERTIFICATE_PATH,\n      pushPassword: process.env.EXP_PUSH_CERTIFICATE_PASSWORD,\n      provisioningProfile: process.env.EXP_PROVIONING_PROFILE_PATH,\n    };\n\n    this._copyOverAsString(credsStarter, {\n      ...creds,\n      provisioningProfile: (await fs.readFile(creds.provisioningProfile)).toString('base64'),\n      certP12: (await fs.readFile(creds.certP12)).toString('base64'),\n      pushP12: (await fs.readFile(creds.pushP12)).toString('base64'),\n    });\n  }\n\n  async runningAsExpert(credsStarter) {\n    log(expertPrompt);\n    for (const choice of ['distCert', 'pushCert', 'provisioningProfile']) {\n      await this.userProvidedOverride(credsStarter, choice);\n    }\n  }\n\n  // End user wants to override these credentials, that is, they want\n  // to provide their own creds\n  async userProvidedOverride(credsStarter, choice) {\n    switch (choice) {\n      case 'distCert':\n        log('Please provide your distribution certificate P12:');\n        const distCertValues = await inquirer.prompt(sharedQuestions);\n        this._copyOverAsString(credsStarter, {\n          certP12: (await fs.readFile(distCertValues.pathToP12)).toString('base64'),\n          certPassword: distCertValues.p12Password,\n        });\n        break;\n      case 'pushCert':\n        log('Please provide the path to your push notification cert P12');\n        const pushCertValues = await inquirer.prompt(sharedQuestions);\n        this._copyOverAsString(credsStarter, {\n          pushP12: (await fs.readFile(pushCertValues.pathToP12)).toString('base64'),\n          pushPassword: pushCertValues.p12Password,\n        });\n        break;\n      case 'provisioningProfile':\n        log('Please provide the path to your .mobile provisioning profile');\n        const { pathToProvisioningProfile } = await inquirer.prompt(provisionProfilePath);\n        this._copyOverAsString(credsStarter, {\n          provisioningProfile: (await fs.readFile(pathToProvisioningProfile)).toString('base64'),\n        });\n        break;\n      default:\n        throw new Error(`Unknown choice to override: ${choice}`);\n    }\n  }\n\n  _copyOverAsString(credsStarter, authActionAttempt) {\n    Object.keys(authActionAttempt).forEach(k => {\n      const isString = typeof authActionAttempt[k] === 'string';\n      if (isString) {\n        credsStarter[k] = authActionAttempt[k];\n      } else {\n        credsStarter[k] = JSON.stringify(authActionAttempt[k]);\n      }\n    });\n  }\n\n  async _ensureAppExists(appleCreds, credsMetadata, teamId, credsStarter) {\n    let checkAppExistenceAttempt = await authFuncs.ensureAppIdLocally(\n      appleCreds,\n      credsMetadata,\n      teamId\n    );\n    if (\n      checkAppExistenceAttempt.result === 'failure' &&\n      checkAppExistenceAttempt.reason.startsWith(authFuncs.NO_BUNDLE_ID)\n    ) {\n      checkAppExistenceAttempt = await authFuncs.createAppOnPortal(\n        appleCreds,\n        credsMetadata,\n        teamId\n      );\n    }\n    this._throwIfFailureWithReasonDump(checkAppExistenceAttempt);\n    this._copyOverAsString(credsStarter, checkAppExistenceAttempt);\n  }\n\n  async produceProvisionProfile(appleCreds, credsMetadata, teamId, credsStarter) {\n    const produceProvisionProfileAttempt = await authFuncs.produceProvisionProfile(\n      appleCreds,\n      credsMetadata,\n      teamId\n    );\n    if (\n      produceProvisionProfileAttempt.result === 'failure' &&\n      produceProvisionProfileAttempt.reason.startsWith(authFuncs.MULTIPLE_PROFILES)\n    ) {\n      log.warn(\n        'Consider logging into https://developer.apple.com and removing the existing provisioning profile'\n      );\n    }\n    this._throwIfFailureWithReasonDump(produceProvisionProfileAttempt);\n    this._copyOverAsString(credsStarter, produceProvisionProfileAttempt);\n  }\n\n  async expoManagedResource(credsStarter, choice, appleCreds, teamId, credsMetadata) {\n    switch (choice) {\n      case 'distCert':\n        const produceCertAttempt = await authFuncs.produceCerts(appleCreds, teamId);\n        this._throwIfFailureWithReasonDump(produceCertAttempt);\n        this._copyOverAsString(credsStarter, produceCertAttempt);\n        break;\n      case 'pushCert':\n        const producePushCertsAttempt = await authFuncs.producePushCerts(\n          appleCreds,\n          credsMetadata,\n          teamId\n        );\n        this._throwIfFailureWithReasonDump(producePushCertsAttempt);\n        this._copyOverAsString(credsStarter, producePushCertsAttempt);\n        break;\n      case 'provisioningProfile':\n        await this.produceProvisionProfile(appleCreds, credsMetadata, teamId, credsStarter);\n        break;\n      default:\n        throw new Error(`Unknown manage resource choice requested: ${choice}`);\n    }\n  }\n\n  async _validateCredsEnsureAppExists(credsStarter, credsMetadata, justTeamId) {\n    const appleCredentials = await this.askForAppleCreds(justTeamId);\n    log('Validating Credentials...');\n    const checkCredsAttempt = await authFuncs.validateCredentialsProduceTeamId(appleCredentials);\n    this._throwIfFailureWithReasonDump(checkCredsAttempt);\n    credsStarter.teamId = checkCredsAttempt.teamId;\n    await this._ensureAppExists(\n      appleCredentials,\n      credsMetadata,\n      checkCredsAttempt.teamId,\n      credsStarter\n    );\n    return appleCredentials;\n  }\n\n  async runningAsExpoManaged(appleCredentials, credsStarter, credsMetadata) {\n    const expoManages = { ...(await inquirer.prompt(whatToOverride)), provisioningProfile: true };\n    const spinner = ora('Running local authentication and producing required credentials').start();\n    try {\n      for (const choice of Object.keys(expoManages)) {\n        spinner.text = `Now producing files for ${choice}`;\n        if (expoManages[choice]) {\n          spinner.start();\n          await this.expoManagedResource(\n            credsStarter,\n            choice,\n            appleCredentials,\n            credsStarter.teamId,\n            credsMetadata\n          );\n        } else {\n          spinner.stop();\n          await this.userProvidedOverride(credsStarter, choice);\n        }\n      }\n    } catch (e) {\n      throw e;\n    } finally {\n      spinner.stop();\n    }\n  }\n\n  _areCredsMissing(creds, action) {\n    const clientHas = new Set(Object.keys(creds));\n    const credsMissing = [];\n    for (const k of OBLIGATORY_CREDS_KEYS.keys()) {\n      if (clientHas.has(k) === false) {\n        credsMissing.push(k);\n        action !== undefined && action();\n      }\n    }\n    if (credsMissing.length !== 0) {\n      log.warn(`We do not have some credentials for you, ${credsMissing}`);\n    }\n  }\n\n  async runLocalAuth(credsMetadata) {\n    let credsStarter = await Credentials.credentialsExistForPlatformAsync(credsMetadata);\n    let clientHasAllNeededCreds = false;\n    if (credsStarter !== undefined) {\n      clientHasAllNeededCreds = true;\n      this._areCredsMissing(credsStarter, () => (clientHasAllNeededCreds = false));\n    } else {\n      credsStarter = {};\n    }\n    \n    if (this.options.useCi) {\n      await this.runningAsCI(credsStarter, credsMetadata);\n      this._areCredsMissing(credsStarter);\n      await Credentials.updateCredentialsForPlatform('ios', credsStarter, credsMetadata);\n      log.warn(`Encrypted ${[...OBLIGATORY_CREDS_KEYS.keys()]} and saved to expo servers`);\n    } else if (clientHasAllNeededCreds === false) {\n      // We just keep mutating the creds object.\n      const strategy = await inquirer.prompt(runAsExpertQuestion);\n      const appleCredentials = await this._validateCredsEnsureAppExists(\n        credsStarter,\n        credsMetadata,\n        !strategy.isExpoManaged\n      );\n      if (strategy.isExpoManaged) {\n        await this.runningAsExpoManaged(appleCredentials, credsStarter, credsMetadata);\n      } else {\n        await this.runningAsExpert(credsStarter);\n      }\n      const { result, ...creds } = credsStarter;\n      if (authFuncs.DEBUG) {\n        console.log(credsStarter);\n      }\n      this._areCredsMissing(creds);\n      await Credentials.updateCredentialsForPlatform('ios', creds, credsMetadata);\n      log.warn(`Encrypted ${[...OBLIGATORY_CREDS_KEYS.keys()]} and saved to expo servers`);\n    } else {\n      log('Using existing credentials for this build');\n    }\n  }\n\n  _throwIfFailureWithReasonDump(replyAttempt) {\n    if (authFuncs.DEBUG) {\n      console.log(replyAttempt);\n    }\n    if (replyAttempt.result === 'failure') {\n      const { reason, rawDump } = replyAttempt;\n      throw new Error(`Reason:${reason}, raw:${JSON.stringify(rawDump)}`);\n    }\n  }\n\n  async askForAppleCreds(justTeamId = false): Promise<IOSCredentials> {\n    if (justTeamId === false) {\n      console.log(`\nWe need your Apple ID/password to manage certificates and\nprovisioning profiles from your Apple Developer account.\n\nNote: Expo does not keep your Apple ID or your Apple password.\n`);\n    } else {\n      console.log(`\nWe need your Apple ID/password to ensure the correct teamID and appID\n\nNote: Expo does not keep your Apple ID or your Apple password.\n`);\n    }\n    return inquirer.prompt(appleCredsQuestions);\n  }\n}\n"],"sourceRoot":"/Users/mike/Documents/Work/exp/src"}