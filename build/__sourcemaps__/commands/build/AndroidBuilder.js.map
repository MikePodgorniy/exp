{"version":3,"sources":["commands/build/AndroidBuilder.js"],"names":["AndroidBuilder","checkStatus","collectAndValidateCredentials","ensureReleaseExists","publishedExpIds","build","getPublishInfoAsync","projectDir","args","username","remotePackageName","experienceName","remoteFullPackageName","credentialMetadata","platform","localKeystorePath","resolve","localKeystoreExists","existsSync","warn","red","questions","type","name","message","prompt","answers","confirm","removeCredentialsForPlatform","credentialsExistForPlatformAsync","credentials","options","useCi","collectAndValidateCredentialsFromCI","clearCredentials","console","log","choices","value","validate","keystorePath","stat","keystorePathStats","isFile","filter","isAbsolute","when","uploadKeystore","val","password","_clearCredentials","keystoreAlias","keystorePassword","keyPassword","readFile","keystoreData","keystore","toString","updateCredentialsForPlatform","creds","process","env","EXP_ANDROID_KEYSTORE_PATH","EXP_ANDROID_KEYSTORE_ALIAS","EXP_ANDROID_STORE_PASSWORD","EXP_ANDROID_KEY_PASSWORD"],"mappings":"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","file":"../../../commands/build/AndroidBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport untildify from 'untildify';\nimport { Exp, Credentials } from 'xdl';\nimport chalk from 'chalk';\nimport log from '../../log';\n\nimport BaseBuilder from './BaseBuilder';\n\nimport type { AndroidCredentials } from 'xdl/build/credentials';\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run() {\n    // Check the status of any current builds\n    await this.checkStatus();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    const publishedExpIds = await this.ensureReleaseExists('android');\n    // Initiate a build\n    await this.build(publishedExpIds, 'android');\n  }\n\n  async _clearCredentials() {\n    const {\n      args: { username, remotePackageName, remoteFullPackageName: experienceName },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    const credentialMetadata = {\n      username,\n      experienceName,\n      platform: 'android',\n    };\n\n    const localKeystorePath = path.resolve(`${remotePackageName}.jks`);\n    const localKeystoreExists = fs.existsSync(localKeystorePath);\n    if (localKeystoreExists) {\n      log.warn(\n        'Detected a local copy of an Android keystore. Please double check that the keystore is up to date so it can be used as a backup.'\n      );\n    } else {\n      log.warn('Cannot find a local keystore in the current project directory.');\n      log.warn('Can you make sure you have a local backup of your keystore?');\n      log.warn(\n        'You can fetch an updated version from our servers by using `exp fetch:android:keystore [project-dir]`'\n      );\n    }\n    log.warn(\n      `Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    log.warn(\n      'Android keystores must be identical to the one previously used to submit your app to the Google Play Store.'\n    );\n    log.warn(\n      'Please read https://docs.expo.io/versions/latest/guides/building-standalone-apps.html#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    let questions = [\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Permanently delete the Android build credentials from our servers?',\n      },\n    ];\n\n    const answers = await inquirer.prompt(questions);\n\n    if (answers.confirm) {\n      await Credentials.removeCredentialsForPlatform('android', credentialMetadata);\n    }\n  }\n\n  async collectAndValidateCredentials() {\n    const {\n      args: { username, remoteFullPackageName: experienceName },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    const credentialMetadata = {\n      username,\n      experienceName,\n      platform: 'android',\n    };\n\n    const credentials: ?AndroidCredentials = await Credentials.credentialsExistForPlatformAsync(\n      credentialMetadata\n    );\n\n    if (this.options.useCi) {\n      await this.collectAndValidateCredentialsFromCI(credentialMetadata);\n    } else if (this.options.clearCredentials || !credentials) {\n      console.log('');\n      const questions = [\n        {\n          type: 'rawlist',\n          name: 'uploadKeystore',\n          message: `Would you like to upload a keystore or have us generate one for you?\\nIf you don't know what this means, let us handle it! :)\\n`,\n          choices: [\n            { name: 'Let Expo handle the process!', value: false },\n            { name: 'I want to upload my own keystore!', value: true },\n          ],\n        },\n        {\n          type: 'input',\n          name: 'keystorePath',\n          message: `Path to keystore:`,\n          validate: async keystorePath => {\n            try {\n              const keystorePathStats = await fs.stat(keystorePath);\n              return keystorePathStats.isFile();\n            } catch (e) {\n              // file does not exist\n              console.log('\\nFile does not exist.');\n              return false;\n            }\n          },\n          filter: keystorePath => {\n            keystorePath = untildify(keystorePath);\n            if (!path.isAbsolute(keystorePath)) {\n              keystorePath = path.resolve(keystorePath);\n            }\n            return keystorePath;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'input',\n          name: 'keystoreAlias',\n          message: `Keystore Alias:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keystorePassword',\n          message: `Keystore Password:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keyPassword',\n          message: `Key Password:`,\n          validate: (password, answers) => {\n            if (password === '') {\n              return false;\n            }\n            // Todo validate keystore passwords\n            return true;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n      ];\n\n      const answers = await inquirer.prompt(questions);\n\n      if (!answers.uploadKeystore) {\n        if (this.options.clearCredentials) {\n          await this._clearCredentials();\n        }\n        return; // just continue\n      } else {\n        const { keystorePath, keystoreAlias, keystorePassword, keyPassword } = answers;\n\n        // read the keystore\n        const keystoreData = await fs.readFile(keystorePath);\n\n        const credentials: AndroidCredentials = {\n          keystore: keystoreData.toString('base64'),\n          keystoreAlias,\n          keystorePassword,\n          keyPassword,\n        };\n        await Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);\n      }\n    }\n  }\n\n  async collectAndValidateCredentialsFromCI(credentialMetadata) {\n    const creds = {\n      keystorePath: process.env.EXP_ANDROID_KEYSTORE_PATH,\n      keystoreAlias: process.env.EXP_ANDROID_KEYSTORE_ALIAS,\n      keystorePassword: process.env.EXP_ANDROID_STORE_PASSWORD,\n      keyPassword: process.env.EXP_ANDROID_KEY_PASSWORD,\n      uploadKeystore: false\n    };\n    \n    const credentials: AndroidCredentials = {\n      ...creds,\n      keystore: (await fs.readFile(creds.keystorePath)).toString('base64'),\n    };\n    await Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);\n    \n  }\n}\n"],"sourceRoot":"/Users/mike/Documents/Work/exp/src"}